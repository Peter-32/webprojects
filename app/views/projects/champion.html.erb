<!-- Top nav Title.  Changes based on top nav choice -->
<div class="card">
  <div id="title"><h1>Projects</h1></div>
</div>
<!-- Float left nav -->
<div id="left-nav"></div>
<!-- Float right nav -->
<div id="right-nav"></div>
<!-- Main content -->
<div id="main-content">
  <div class="container">
    <div class="jumbotron">
      <h2>LoL Champion Recommender</h2>
      <p>Recommends champions to use in the game of LoL based on which three champion
        combination has the best average winrate when in the position to counter-pick using three champions.
        Feel free to copy and paste this into Excel for personal use if you would like.
        If you have any requests for bottom lane or to see results listed out for all enemy champions, let me know.
        Data was compiled on August 19, 2017 from the championgg developer API.
      </p>
    </div>
  </div>
  <div class="container">
    <button onclick="loadXMLJungle()">Jungle</button>
    <button onclick="loadXMLMiddle()">Middle</button>
    <button onclick="loadXMLTop()">Top</button>
    <button onclick="toggleSQL()">SQL</button>
    <table id="the-table"></table>
  </div>
</div>
<div id="sql-champion" class="invisible">
  <h2>SQL used to generate this table</h2>
  <p>
    select 'MIDDLE' AS role, champion1, champion2, champion3, count(distinct enemy_champion_id) AS matchups_considered, -- distinct keyword not needed<br>
    avg(highest_win_rate) AS avg_win_rate, max(number_of_champions_in_role) number_of_champions_in_role,<br>
    avg(champ1_winrate) AS avg_champ1_winrate,<br>
    avg(champ2_winrate) AS avg_champ2_winrate,<br>
    avg(champ3_winrate) AS avg_champ3_winrate from<br>
    (<br>
    select champion1, champion2, champion3, enemy_champion_id,<br>
    max(win_rate) highest_win_rate, SUM(IF(fact.champion_id = champion1, win_rate, 0)) AS champ1_winrate,<br>
    SUM(IF(fact.champion_id = champion2, win_rate, 0)) AS champ2_winrate,<br>
    SUM(IF(fact.champion_id = champion3, win_rate, 0)) AS champ3_winrate from win_rates fact<br>
    INNER JOIN<br>
        (  SELECT<br>
          a.champion AS champion1,<br>
          b.champion AS champion2,<br>
          c.champion AS champion3,<br>
          champion1_id AS champion1_id,<br>
          champion2_id AS champion2_id,<br>
          champion3_id AS champion3_id<br>
    <br>
          FROM<br>
          (select x.champion_id champion1_id, y.champion_id champion2_id, z.champion_id champion3_id<br>
          FROM<br>
          (select distinct champion_id from win_rates where role = 'MIDDLE') x<br>
          INNER JOIN<br>
          (select distinct champion_id from win_rates where role = 'MIDDLE') y on<br>
          x.champion_id != y.champion_id<br>
          INNER JOIN<br>
          (select distinct champion_id from win_rates where role = 'MIDDLE') z on<br>
          x.champion_id != z.champion_id and y.champion_id != z.champion_id<br>
          ) three_champions<br>
          INNER JOIN<br>
            champions a on<br>
            a.champion_id = champion1_id<br>
          INNER JOIN<br>
            champions b on<br>
            b.champion_id = champion2_id<br>
          INNER JOIN<br>
            champions c on<br>
            c.champion_id = champion3_id<br>
        -- join with best chance for win rate<br>
    <br>
        -- alphabetical order<br>
        where a.champion <= b.champion<br>
        and b.champion <= c.champion<br>
        order by 1,2,3) all_combinations on<br>
        fact.champion_id IN (all_combinations.champion1_id,all_combinations.champion2_id,all_combinations.champion3_id)<br>
    <br>
    where role = 'MIDDLE' group by 1,2,3,4 order by 1<br>
    ) x<br>
    CROSS JOIN (select count(distinct enemy_champion_id) number_of_champions_in_role from win_rates where role = 'MIDDLE') z<br>
    group by 1,2,3,4<br>
    having matchups_considered > (.90 * number_of_champions_in_role) -- 90% matchups found at least<br>
    order by avg_win_rate desc<br>
    ;
</p>
</div>
