<!-- Top nav Title.  Changes based on top nav choice -->
<div class="card">
  <div id="title"><h1>Projects</h1></div>
</div>
<!-- Float left nav -->
<div id="left-nav"></div>
<!-- Float right nav -->
<div id="right-nav"></div>
<!-- Main content -->
<div id="main-content">
  <div class="container">
    <div class="jumbotron">
      <h2>Create a Network</h2>
      <p>This network plot serves as a reminder of some of the tools at our disposal when working on a website.
        Some tools are clustered together for various reasons.
        Performance and ESLint are found in the center due to the importance of readable and fast running JavaScript code.
      </p>
    </div>
  </div>
    <div id="mynetwork" class="card"></div>
      <div class="container">
        <ul>
          <li>JavaScript - Interactivity of web pages.</li>
          <li>Python, R, and SQL - Data processing, data exploration, data modeling, and automations.</li>
          <li>Git - Project version control.</li>
          <li>HTML - Structure of web pages.</li>
          <li>Ruby - A backend language for web pages.</li>
          <li>Sinatra - A simpler ruby framework that can be used in place of Rails.</li>
          <li>Rails - Very popular Model View Controller (MVC) framework for the server side, that runs on Ruby.</li>
          <li>AngularJS - Very popular Model View Controller (MVC) framework on the client side, especially useful for single page apps.
                The HTML is read first and custom tags/directives in the HTML act as the model.  You will CRUD the model in the JavaScript,
                and it is common to read JSON from other sources and change the model.  Four major parts are the view (HTML), directives (The initial values), the controller, and scope.
                Just define the controller to span the scope of a div, and give that controller functions.  A controller within a controller will inherit the functions and override functions with the same name.
                You may not need a front end framework like AngularJS if you choose to not have a single page app.</li>
          <li>PHP - A server side language still frequently used that can be used in place of Ruby.  Some other common languages for the server side are JavaScript, Python, and Java.</li>
          <li>jQuery - Makes JavaScript easier.  It takes less code and works on practically all browsers.</li>
          <li>D3 - Efficient manipulation of documents using data.  It is fast and uses SVG.  Some main points to remember are
                that it uses a new way to select, allows you to set properties based on function output,
                Create/update/delete elements when new data comes in, it uses the standard
                JavaScript visuals by using SVG, and has animations by gradually changing styles over time.
                Resources: D3 on GitHub.</li>
          <li>Bootstrap - Make pages work on many size screens.</li>
          <li>JIRA - Project management application.</li>
          <li>CSS - Styling of web pages.</li>
          <li>Unix/Linux - The command line on Macs.</li>
          <li>Lodash - A JavaScript utility library.  If you need to do something see if this can do it first.</li>
          <li>PWAs - The replacement for Android/IOs/Native mobile applications that works on both devices
                and uses HTML/CSS/JavaScript.</li>
          <li>Generators and Async/await - Handle many concurrent operations on a single thread using events.</li>
          <li>JavaScript Classes - Use if you have object abstractions that have behavior and properties.</li>
          <li>AJAX - Send a request to the server and recieve a response without reloading a webpage.</li>
          <li>Performance - Test your site to see if it runs fast enough.<ul>
            <li>https://www.webpagetest.org/</li>
            <li>https://developers.google.com/speed/pagespeed/insights/?url=www.google.com</li></ul></li>
          <li>Atom - A good text editor when working with file directories often like in a Rails application.</li>
          <li>ESLint - Finds things wrong with JavaScript code without executing it.<ol>
                <li>https://github.com/eslint/eslint</li>
                <li>Install globally, then run this code to use it</li>
                <li>eslint yourfile.js</li></ol></li>
          <li>Light Table with Tern.js - A good text editor, especially for JavaScript.</li>
          <li>Webpack - A module bundler.  Lots of JavaScript dependencies, CSS, SASS, png, jpg, hbs files are taken as input
                and the output is four files: js, png, jpg, and css.</li>
          <li>Babel - Makes your code more compatible with browsers by converting new JavaScript versions, CoffeeScript, and TypeScript to old JavaScript.</li>
          <li>npm - Package manager.  Use this in the command line to get packages and share/publish packages.</li>
          <li>vis.js - Visualizations for JavaScript.  Includes networks, timelines, 2D/3D Graphs.</li>
        </ul>
      </div>

  </div>
</div>
